@page "/fetchdata"
@inject HttpClient Http

@using System.Text;
@using MqttService;
@using MQTTnet;
@inject MqttClientService MqttClientService;
@implements IDisposable


<h3>MqttTest</h3>
<p>@payload</p>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;


    private string payload = "Unknown";

    private Guid guid = new Guid();
    private SubcribedTopic sub = new SubcribedTopic("pHome/energyMonitor/kWh", typeof(int));


    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");

        MqttClientService.Sub(guid, sub);
        MqttClientService.MessageReceived += OnSubscriberMessageReceived;

    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }


    private void OnSubscriberMessageReceived(object sender, MqttApplicationMessageReceivedEventArgs x)
    {
        payload = Encoding.UTF8.GetString(x.ApplicationMessage.Payload);
        StateHasChanged();
    }


    void IDisposable.Dispose()
    {
        MqttClientService.UnSub(guid, sub);
    }


}
